
* MAXLANG

An expression based register-based bytecode interpreted language
** Things to do
- [ ] Add in structs
- [X] Modify tail calls to recursive functions use the same stack frame?? (maybe not reasonable)
- [ ] Add in a trait system (similar to rust/elixir behaviours)
- [X] Add in native function calls (sum and stuff)
- [ ] Add a module system
  Not totally sure how to do it yet. Have static modules and computed modules.
  A static module is like a struct - all things have their positions at compile time.
  Computed modules aren't static, so they are a little slower to access, but dynamic
- [ ] Add in structured coroutines
  Maybe do this in a way similar to kotlin, run by default in a tokio thread pool.
  Don't have explicit await/async, just colour functions. Async functions can only be
  run inside other async functions or launch {} block.
  Normal functions can be run anywhere.
- [X] Update expressions so that they can be given a register to put their result into
  When compiling an expression, give an optional register to put the result into.
  This register is not managed by the expression - it's managed by whatever called the compilation of it.
  It doesn't need to do anything to this slot. (Use the Local::Reserved struct from outside for this)
- [X] Make all frames share the same underlying buffer, each one should have an index



